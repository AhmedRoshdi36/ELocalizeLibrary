@model IEnumerable<LibraryManagement.DAL.Entities.Book>
@using LibraryManagement.DAL
@using System.ComponentModel.DataAnnotations

@{
    ViewData["Title"] = "Books";
    var genres = Enum.GetValues<Genre>();
}

@Html.AntiForgeryToken()

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3 class="mb-0">Books</h3>
    <div>
        <a asp-action="Create" class="btn btn-primary">
            <i class="fas fa-plus"></i> Create New
        </a>
        <a asp-controller="Books" asp-action="Deleted" class="btn btn-outline-secondary">
            <i class="fas fa-trash"></i> Deleted Books
        </a>
    </div>
</div>

<!-- Compact Search and Filter Section -->
<div class="row mb-3 g-2 align-items-end">
    <div class="col-md-4">
        <input type="text" class="form-control" id="searchInput" placeholder="Search books...">
    </div>
    <div class="col-md-3">
        <select class="form-select" id="genreFilter">
            <option value="">All Genres</option>
            @foreach (var genre in genres)
            {
                var displayName = genre.GetType()
                    .GetField(genre.ToString())
                    ?.GetCustomAttributes(typeof(DisplayAttribute), false)
                    .FirstOrDefault() as DisplayAttribute;
                
                var genreName = displayName?.Name ?? genre.ToString();
                <option value="@genreName">@genreName</option>
            }
        </select>
    </div>
    <div class="col-md-3">
        <select class="form-select" id="availabilityFilter">
            <option value="">All Books</option>
            <option value="available">Available</option>
            <option value="unavailable">Unavailable</option>
        </select>
    </div>
    <div class="col-md-2">
        <button type="button" class="btn btn-outline-secondary btn-sm w-100" id="clearFilters">
            <i class="fas fa-times"></i> Clear
        </button>
    </div>
</div>
<div class="mb-3">
    <small class="text-muted" id="resultsCount"></small>
</div>

<div class="row">
    @foreach (var item in Model)
    {
        <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
            <div class="card h-100 shadow-sm position-relative card-hover">
                @if (!string.IsNullOrEmpty(item.ImagePath))
                {
                    <a asp-action="Details" asp-route-id="@item.Id">
                        <img src="@Url.Content(item.ImagePath)" class="card-img-top p-2" style="max-height:220px; width:100%; object-fit:contain; background:#fff;" />
                    </a>
                }
                else
                {
                    <div class="bg-light d-flex align-items-center justify-content-center" style="height:220px;">
                        <span class="text-muted">No image</span>
                    </div>
                }

                <div class="card-body">
                    <h5 class="card-title mb-1"><a class="text-decoration-none" asp-action="Details" asp-route-id="@item.Id">@item.Title</a></h5>
                    <p class="card-text  mb-2">Author: @item.Author</p>
                    <p class="card-text text-muted mb-2">@item.Genre</p>

                    <p class="card-text small text-truncate" style="max-width: 100%;">
                        @item.Description
                    </p>
                    @{
                        var borrowedCount = ViewBag.BorrowedCounts[item.Id];
                        var availableCopies = item.Copies - borrowedCount;
                    }
                    <div class="mb-2">
                        <div class="d-flex justify-content-between align-items-center mb-1">
                            <span class="badge bg-@(availableCopies > 0 ? "success" : "danger")">
                                Available: @availableCopies
                            </span>
                        <small class="text-muted d-block">Total: @item.Copies | Borrowed: @borrowedCount</small>
                        </div>
                    </div>
                </div>

                <div class="card-footer bg-white border-0 pb-3 text-center">
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-info me-1">Details</a>
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-warning me-1">Edit</a>
                    @if (availableCopies == item.Copies)
                    {
                        <button type="button" class="btn btn-sm btn-outline-danger delete-book-btn" 
                                data-book-id="@item.Id" 
                                data-book-title="@item.Title"
                                data-book-author="@item.Author"
                                data-book-image="@Url.Content(item.ImagePath ?? "")">
                            <i class="fas fa-trash me-1"></i>Delete
                        </button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-sm btn-outline-secondary" disabled 
                                title="Cannot delete: @borrowedCount borrowed copies">
                            <i class="fas fa-lock me-1"></i>Delete
                        </button>
                    }
                </div>
            </div>
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteBookModal" tabindex="-1" aria-labelledby="deleteBookModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteBookModalLabel">
                    <i class="fas fa-exclamation-triangle me-2"></i>Delete Book
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="lead mb-3">Are you sure you want to delete this book?</p>
                
                <div class="row align-items-center">
                    <div class="col-md-4 mb-3 mb-md-0">
                        <div class="d-flex align-items-center justify-content-center border bg-white" style="height:150px;">
                            <img id="deleteBookImage" src="" alt="Book Cover" class="p-2" style="max-height:130px; width:100%; object-fit:contain;" />
                        </div>
                    </div>
                    <div class="col-md-8">
                        <h6 id="deleteBookTitle" class="mb-1"></h6>
                        <div id="deleteBookAuthor" class="text-muted mb-2"></div>
                        
                        <!-- Copy Status Information -->
                        <div id="copyStatus" class="mb-2">
                            <small class="text-muted">
                                <i class="fas fa-book me-1"></i>
                                Total: <span id="totalCopies">0</span> | 
                                Available: <span id="availableCopies">0</span> | 
                                Borrowed: <span id="borrowedCopies">0</span>
                            </small>
                        </div>
                        
                        <span class="badge bg-secondary">This action cannot be undone.</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="fas fa-trash me-1"></i>Delete Book
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            let bookToDelete = null;
            
            // Search and Filter functionality
            function filterBooks() {
                const searchTerm = $('#searchInput').val().toLowerCase();
                const selectedGenre = $('#genreFilter').val();
                const availabilityFilter = $('#availabilityFilter').val();
                
                let visibleCount = 0;
                
                $('.col-sm-6').each(function() {
                    const card = $(this);
                    const title = card.find('.card-title').text().toLowerCase();
                    const author = card.find('.card-text').first().text().toLowerCase();
                    const description = card.find('.card-text').last().text().toLowerCase();
                    const genre = card.find('.card-text').eq(1).text().toLowerCase();
                    const availableText = card.find('.badge').text();
                    const copies = parseInt(availableText.match(/Available: (\d+)/)?.[1] || '0');
                    
                    let showCard = true;
                    
                    // Search filter
                    if (searchTerm && !title.includes(searchTerm) && !author.includes(searchTerm) && !description.includes(searchTerm)) {
                        showCard = false;
                    }
                    
                    // Genre filter
                    if (selectedGenre && !genre.includes(selectedGenre.toLowerCase())) {
                        showCard = false;
                    }
                    
                    // Availability filter
                    if (availabilityFilter === 'available' && copies <= 0) {
                        showCard = false;
                    } else if (availabilityFilter === 'unavailable' && copies > 0) {
                        showCard = false;
                    }
                    
                    if (showCard) {
                        card.show();
                        visibleCount++;
                    } else {
                        card.hide();
                    }
                });
                
                // Update results count
                $('#resultsCount').text(`Showing ${visibleCount} of ${$('.col-sm-6').length} books`);
                
                // Show no results message if needed
                if (visibleCount === 0) {
                    if ($('.no-results-message').length === 0) {
                        $('.row').append('<div class="col-12 text-center py-5 no-results-message"><h4 class="text-muted">No books match your search criteria</h4><button type="button" class="btn btn-outline-primary" id="clearFiltersBtn">Clear Filters</button></div>');
                    }
                } else {
                    $('.no-results-message').remove();
                }
            }
            
            // Search input event
            $('#searchInput').on('input', function() {
                filterBooks();
            });
            
            // Filter change events
            $('#genreFilter, #availabilityFilter').on('change', function() {
                filterBooks();
            });
            
            // Clear filters
            $('#clearFilters').on('click', function() {
                $('#searchInput').val('');
                $('#genreFilter').val('');
                $('#availabilityFilter').val('');
                filterBooks();
            });
            
            // Clear filters from no results message
            $(document).on('click', '#clearFiltersBtn', function() {
                $('#searchInput').val('');
                $('#genreFilter').val('');
                $('#availabilityFilter').val('');
                filterBooks();
            });
            
            // Initialize results count
            filterBooks();
            
            // Handle delete button click
            $('.delete-book-btn').on('click', function () {
                const bookId = $(this).data('book-id');
                const bookTitle = $(this).data('book-title');
                const bookAuthor = $(this).data('book-author');
                const bookImage = $(this).data('book-image');
                
                // Store the book data
                bookToDelete = {
                    id: bookId,
                    title: bookTitle,
                    author: bookAuthor,
                    image: bookImage
                };
                
                // Populate modal with basic book details
                $('#deleteBookTitle').text(bookTitle);
                $('#deleteBookAuthor').text(bookAuthor);
                
                if (bookImage && bookImage.trim() !== '') {
                    $('#deleteBookImage').attr('src', bookImage).show();
                } else {
                    $('#deleteBookImage').hide();
                }
                
                // Fetch detailed delete information
                $.ajax({
                    url: `/Books/GetDeleteInfo/${bookId}`,
                    type: 'GET',
                    success: function (response) {
                        if (response.success) {
                            // Update copy status information
                            $('#totalCopies').text(response.totalCopies);
                            $('#availableCopies').text(response.availableCopies);
                            $('#borrowedCopies').text(response.borrowedCopies);
                        } else {
                            console.error('Error fetching delete info:', response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching delete info:', error);
                    }
                });
                
                // Show the modal
                $('#deleteBookModal').modal('show');
            });
            
            // Handle confirm delete button click
            $('#confirmDeleteBtn').on('click', function () {
                if (!bookToDelete) return;
                
                console.log('Starting delete for book:', bookToDelete);
                
                // Hide confirmation modal
                $('#deleteBookModal').modal('hide');
                
                // Get anti-forgery token
                const token = $('input[name="__RequestVerificationToken"]').val();
                
                // Send AJAX delete request
                console.log('Sending AJAX request with token:', token);
                $.ajax({
                    url: '/Books/DeleteAjax',
                    type: 'POST',
                    data: {
                        id: bookToDelete.id,
                        __RequestVerificationToken: token
                    },
                    timeout: 10000, // 10 second timeout
                    success: function (response) {
                        if (response.success) {
                            // Remove the book card from the DOM
                            $(`[data-book-id="${bookToDelete.id}"]`).closest('.col-sm-6').fadeOut(300, function() {
                                $(this).remove();
                                
                                // Show success message
                                showNotification('Book deleted successfully!', 'success');
                                
                                // Check if no books left
                                if ($('.col-sm-6').length === 0) {
                                    $('.row').html('<div class="col-12 text-center py-5"><h4 class="text-muted">No books found</h4><a href="/Books/Create" class="btn btn-primary">Add your first book</a></div>');
                                }
                            });
                        } else {
                            showNotification('Error deleting book: ' + response.message, 'error');
                        }
                    },
                    error: function (xhr, status, error) {
                        let errorMessage = 'Error deleting book. Please try again.';
                        
                        if (status === 'timeout') {
                            errorMessage = 'Request timed out. Please try again.';
                        } else if (xhr.status === 404) {
                            errorMessage = 'Book not found.';
                        } else if (xhr.status === 500) {
                            errorMessage = 'Server error. Please try again later.';
                        }
                        
                        showNotification(errorMessage, 'error');
                        console.error('Delete error:', { status, error, responseText: xhr.responseText });
                    }
                });
            });
            
            // Function to show notifications
            function showNotification(message, type) {
                const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
                const alertHtml = `
                    <div class="alert ${alertClass} alert-dismissible fade show position-fixed" 
                         style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;
                
                $('body').append(alertHtml);
                
                // Auto-remove after 5 seconds
                setTimeout(function() {
                    $('.alert').fadeOut(300, function() {
                        $(this).remove();
                    });
                }, 5000);
            }
        });
    </script>
}


