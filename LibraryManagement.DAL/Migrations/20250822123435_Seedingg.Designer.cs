// <auto-generated />
using LibraryManagement.DAL.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagement.DAL.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20250822123435_Seedingg")]
    partial class Seedingg
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagement.DAL.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Copies")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Ian Griffiths",
                            Copies = 5,
                            Description = "Build Cloud,Web and Desktop Applications",
                            Genre = 1,
                            ImagePath = "images/books/CSharp 12 .jpg",
                            Title = "C# 12"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Stephan Prata",
                            Copies = 4,
                            Description = "Intro to C++",
                            Genre = 1,
                            ImagePath = "images/books/CPP .jpg",
                            Title = "C++"
                        },
                        new
                        {
                            Id = 3,
                            Author = "David Mount",
                            Copies = 4,
                            Description = "Data Structures and Algorithms in C++, Goodrich",
                            Genre = 1,
                            ImagePath = "images/books/DSA.jpg",
                            Title = "Data Structures and Algorithms"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Jane Austen",
                            Copies = 3,
                            Description = "A classic romantic novel about love and societal expectations.",
                            Genre = 4,
                            ImagePath = "images/books/Pride .jpg",
                            Title = "Pride and Prejudice"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
